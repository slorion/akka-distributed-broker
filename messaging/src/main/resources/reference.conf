com.tsf.commons.messaging.brokers.akka {
	hostname = "127.0.0.1"
	port = 25520

	cluster-name = "MessageBrokerSystem"
	worker-role-name = "worker"

	message-timeout = 5s

	request-set {
		trimming-interval = 5m
		max-age = 1h
		write-timeout = 5s
	}

	akka-config {
		akka {
			extensions = ["akka.cluster.metrics.ClusterMetricsExtension", "com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

			loglevel = INFO
			stdout-loglevel = ${com.tsf.commons.messaging.broker.akka.akka-config.akka.loglevel}

			log-dead-letters = 10

			cluster.run-coordinated-shutdown-when-down = on
			coordinated-shutdown.terminate-actor-system = on
			coordinated-shutdown.run-by-jvm-shutdown-hook = on
			coordinated-shutdown.exit-jvm = on

			actor {
				provider = "akka.cluster.ClusterActorRefProvider"

				default-mailbox {
					mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
				}

				//allow-java-serialization = off

				serializers {
					kryoRomix = "com.romix.akka.serialization.kryo.KryoSerializer"
				}

				serialization-bindings {
					"java.io.Serializable" = kryoRomix
				}

				# see https://github.com/romix/akka-kryo-serialization#configuration-of-akka-kryo-serialization
				kryo {
					type = "nograph"
					idstrategy = "automatic"
					buffer-size = 4096
					max-buffer-size = -1
					use-manifests = false
					use-unsafe = true
					//post-serialization-transformations = "lz4"
					implicit-registration-logging = true
					kryo-trace = false
					resolve-subclasses = false
				}

				deployment {
					enable-whitelist = on

					whitelist = [
						"com.tsf.commons.messaging.brokers.akka.Worker"
					]

					/master/default-work-router {
						# see http://doc.akka.io/docs/akka/current/scala/cluster-metrics.html
						router = cluster-metrics-adaptive-pool
						metrics-selector = mix

						cluster {
							enabled = on
							allow-local-routees = on
							use-roles = [
								${com.tsf.commons.messaging.brokers.akka.worker-role-name}
							]
						}

						optimal-size-exploring-resizer {
							enabled = on
							action-interval = 5s
							downsize-after-underutilized-for = 48h
						}
					}
				}
			}

			remote {
				log-remote-lifecycle-events = ${com.tsf.commons.messaging.brokers.akka.akka-config.akka.loglevel}
				log-sent-messages = on
				log-received-messages = on

				artery {
					enabled = on

					canonical.hostname = ${com.tsf.commons.messaging.brokers.akka.hostname}
					canonical.port = ${com.tsf.commons.messaging.brokers.akka.port}

					log-sent-messages = on
					log-received-messages = on
					log-frame-size-exceeding = 1000b

					advanced {
						# http://doc.akka.io/docs/akka/current/scala/remoting-artery.html#Fine-tuning_CPU_usage_latency_tradeoff
						idle-cpu-level = 1

						delete-aeron-dir = yes
					}
				}
			}

			cluster {
				# see http://developer.lightbend.com/docs/akka-commercial-addons/current/split-brain-resolver.html
				# While a network partition is never desirable, in our case, it can be tolerated with almost no consequence.
				# The only shared state in the cluster is the JobId set which ensures that a job request is not processed more than once.
				# In the case of a network partition, there is an unlikely scenario where that invariant could be violated:
				#   - a client sends a job request to a master (M1)
				#   - M1 forwards the request to a worker, but it is dropped (AskTimeout)
				#   - a network partition occurs
				#   - the client resends the same request to another master (M2)
				#   - M1 and M2 are on different partitions
				#   - both M1 and M2 can now possibly forward the same request to workers in different partitions,
				#     thus different JobId sets will be used to validate that the request has not been processed twice
				auto-down-unreachable-after = 10s

				roles = [
					${com.tsf.commons.messaging.brokers.akka.worker-role-name}
				]

				# enable or disable JMX MBeans for management of the cluster
				jmx.enabled = on

				# allow multiple cluster systems in the same JVM
				//jmx.multi-mbeans-in-same-jvm = on

				# disable legacy metrics in akka-cluster.
				metrics.enabled = off

				log-info = on

				seed-nodes = [
					"akka://"${com.tsf.commons.messaging.brokers.akka.cluster-name}"@"${com.tsf.commons.messaging.brokers.akka.akka-config.akka.remote.artery.canonical.hostname}":"${com.tsf.commons.messaging.brokers.akka.akka-config.akka.remote.artery.canonical.port}
				]

				# http://doc.akka.io/docs/akka/current/scala/cluster-usage.html#How_To_Startup_when_Cluster_Size_Reached
				role {
					worker.min-nr-of-members = 1
				}
			}
		}
	}
}