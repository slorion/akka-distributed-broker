plugins {
	id "com.github.johnrengelman.shadow" version "2.0.2"
}

ext.akkaActor = 'com.typesafe.akka:akka-actor_2.12:2.5.12' // https://github.com/akka/akka
ext.akkaCluster = 'com.typesafe.akka:akka-cluster_2.12:2.5.12'
ext.akkaClusterMetrics = 'com.typesafe.akka:akka-cluster-metrics_2.12:2.5.12'
ext.akkaDistributedData = 'com.typesafe.akka:akka-distributed-data_2.12:2.5.12'
ext.akkaRemote = 'com.typesafe.akka:akka-remote_2.12:2.5.12'
ext.jacksonJdk8 = 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5' // https://github.com/FasterXML/jackson-modules-java8
ext.jacksonJSR310 = 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5' // https://github.com/FasterXML/jackson-modules-java8
ext.json4s = 'org.json4s:json4s-jackson_2.12:3.5.3' // https://github.com/json4s/json4s
ext.romixAkkaKryo = 'com.github.romix.akka:akka-kryo-serialization_2.12:0.5.2' // https://github.com/romix/akka-kryo-serialization
ext.scalaLibrary = 'org.scala-lang:scala-library:2.12.6' // https://github.com/scala/scala
ext.scalaReflect = 'org.scala-lang:scala-reflect:2.12.6' // https://github.com/scala/scala
ext.scalaTest = 'org.scalatest:scalatest_2.12:3.0.5' // https://github.com/scalatest/scalatest
ext.typesafeConfig = 'com.typesafe:config:1.3.3' // https://github.com/typesafehub/config
ext.undertowCore = 'io.undertow:undertow-core:2.0.7.Final' // https://github.com/undertow-io/undertow

ext.mavenGroupId = "com.tsf.commons"
ext.mavenVersion = "0.1.0-SNAPSHOT"

allprojects {
	repositories {
		mavenCentral()
		mavenLocal()
	}

	apply plugin: "java"
	apply plugin: "maven"
	apply plugin: "maven-publish"
	apply plugin: "scala"

	sourceCompatibility = "1.8"
	[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

	group = mavenGroupId
	version = mavenVersion

	dependencies {
		compile scalaLibrary
		testCompile scalaTest
	}

	// see https://docs.gradle.org/current/userguide/scala_plugin.html
	tasks.withType(ScalaCompile) {
		// see https://blog.threatstack.com/useful-scalac-options-for-better-scala-development-part-1
		// and https://blog.threatstack.com/useful-scala-compiler-options-part-2-advanced-language-features
		scalaCompileOptions.additionalParameters = [
			"-encoding", "UTF-8", // it's really 2 parameters
			"-deprecation", // Emit warning and location for usages of deprecated APIs
			"-feature", // Emit warning and location for usages of features that should be imported explicitly
			"-unchecked", // Enable additional warnings where generated code depends on assumptions
			//"-Xfatal-warnings", // Fail the compilation if there are any warnings
			"-Xlint", // Enable recommended additional warnings
			"-Ywarn-adapted-args", // Warn if an argument list is modified to match the receiver
			"-Ywarn-dead-code", // Warn when dead code is identified
			"-Ywarn-inaccessible", // Warn about inaccessible types in method signatures
			"-Ywarn-nullary-override", // Warn when non-nullary overrides nullary, e.g. def foo() over def foo
			"-Ywarn-numeric-widen", // Warn when numerics are widened
			"-Ywarn-value-discard", // Warn when a value is returned by a function with the Unit return type (i.e. a procedure)
			"-Ywarn-unused-import", // Warn when unused imports are detected
			"-Ywarn-unused", // Warn when unused code is detected
			"-Xfuture" // see links above
		]
	}

	task sourcesJar(type: Jar) {
		classifier = "sources"
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = "javadoc"
		from javadoc.destinationDir
	}

	task scaladocJar(type: Jar, dependsOn: scaladoc) {
		classifier = "scaladoc"
		from scaladoc.destinationDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
		archives scaladocJar
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifactId "commons-" + project.name
				from components.java

				artifact sourcesJar
				artifact javadocJar
				artifact scaladocJar
			}
		}
	}
}

// Find any 3rd party libraries which have released new versions to the central Maven repo since we last upgraded
task checkLibVersions {
	doLast {
		def checked = [:]

		allprojects {
			configurations.each { configuration ->
				configuration.allDependencies.each { dependency ->
					def dependencyVersion = VersionNumber.parse(dependency.version)

					if (!checked[dependency]) {
						def group = dependency.group
						def path = group.replace(".", "/")
						def name = dependency.name
						def url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"

						try {
							def metadata = new XmlSlurper().parseText(url.toURL().text)
							def versions = metadata.versioning.versions.version.collect { VersionNumber.parse(it.text()) }

							def newest = versions.max()

							def newestStable =
								versions.findAll {
									it.qualifier == null || it.qualifier.equalsIgnoreCase("final")
								}.max()

							def unstableNotice = (newest == newestStable) ? "" : "(unstable: $newest)"

							if (dependencyVersion < newestStable) {
								println "NEW: $group:$name $dependencyVersion -> $newestStable $unstableNotice"
							} else {
								println "$group:$name $dependencyVersion $unstableNotice"
							}

						} catch (FileNotFoundException e) {
							logger.debug "Unable to download $url: $e.message"
						} catch (org.xml.sax.SAXParseException e) {
							logger.debug "Unable to parse $url: $e.message"
						}

						checked[dependency] = true
					}
				}
			}
		}
	}
}